<?xml version="1.0" encoding="UTF-8" ?>

<!--
Normally we'd collect information about your projects using an online form,
but the CS web-site is being retired and SAFE isn't up to the task yet.  As 
an interim solution the idea is that

- you complete this XML file, replacing the template content but retaining
  the structure, and submit it via SAFE,
  then
- later, and hopefully (semi-)automatically, we'll import it into SAFE for 
  you in order to drive the assessment process.

This submission represents a draft specification.  Completion of the content
below is an exercise in formative assessment only: it is a way to a) explore
the viability of initial ideas, and refine these where need be, and b) allow
provision of feedback.  We therefore want a clear, concise specification of 
no more than one page of A4. 

If in doubt about the content of the longer sections, make sure you read the
unit handbook at

https://www.cs.bris.ac.uk/Teaching/Resources/COMSM0111/handbook.pdf
-->

 <project>

<!-- 
In this section, we want

1. your CS user name 
   (e.g., "jl8971"),
2. your project title (even if you change this later),
3. the full name of                your Supervisor within  CS,
   (e.g., "Dan Page"),
4. whether said Supervisor is  confirmed or tentative,
5. the full name (and affiliation) any  Advisor(s) outside CS 
   (e.g., an industrial collaborator such as "Fred Bloggs, IBM"),
6. whether said Advisor(s) are confirmed or tentative,
   and
7. whether your project is of type enterprise or research (which implies you
   are also registered on the associated "sister unit").
-->

  <admin>
               <username>dm1905</username>
                  <title>Dictionary Matching with Fingerprints: Theory and Practice</title>

             <supervisor>Raphael Clifford</supervisor>
   <confirmed_supervisor>yes</confirmed_supervisor>

                <advisor>Benjamin Sach</advisor>
      <confirmed_advisor>yes</confirmed_advisor>

                   <type>research</type>
 </admin>

<!-- 
In this section we want a high-level description of the project; the content 
might include a description of what the central problem is, and any previous 
or related work done to solve it.
-->

  <description>
  Intuitively it might seem that for matching a pattern of length m with a text, the minimum amount of space required is Omega(m). However, if we allow for the possibility of false positives - our algorithm finding matches where there aren't any - it is possible to improve this. This was first realised in Porat and Porat in 2009[1], who created an algorithm for exact matching with O(logm) time per character and O(logm) space, and improved in 2011 by Breslauer and Galil[2] to constant time per character. Both of these methods were achieved using Karp-Rabin fingerprints, and were implemented by myself over the summer as part of a Studentship with the Algorithms Team at Bristol.

  Since then, a question in the theory community has been what other problems can be improved using fingerprinting. 2013 saw an O(Sigma*logm) space and constant time per character for parameterised matching by Jalsenius, Porat and Sach[3].

  Another related problem is dictionary matching, which looks at matching one text to k patterns, which are not necessarily of equal length. Current results have been as follows:

  -An O(m) space with constant time per character solution using the Ahoâ€“Corasick string matching algorithm[4]
  -An O(k*logm) space with O(k) time per character solution using k instances of Breslauer and Galil's algorithm.

  The question this project aims to achieve is can we improve these bounds? Both in theory and in practice.

  [1] Benny Porat and Ely Porat - Exact And Approximate Pattern Matching In The Streaming Model
  [2] Dany Breslauer and Zvi Galil - Real-Time Streaming String-Matching
  [3] Markus Jalsenius, Benny Porat, and Benjamin Sach - Parameterized matching in the streaming model
  [4] Alfred V. Aho and Margaret J. Corasick - Efficient string matching: An aid to bibliographic search
 </description>

<!-- 
In this section we want a low(er)-level outline of exactly what you will to 
do within the project.  The easiest way to structure this is as a concise, 
focused set of bullet points outlining a) the high-level objective(s), and 
b) concrete, step-by-step aims that will move you towards this.
-->

  <objectives>
  -Improve the best performance for dictionary matching with a new algorithm.
  -Implement this algorithm in practice.
  -Analyse and compare to current algorithms.
  -Improve the practical performance of the algorithm by optimisation.
 </objectives>

<!-- 
In this section we want a draft plan for execution of the outlined aims and 
objectives: this can include time scales, but also aspects of resource and 
risk/contingency planning.
-->

  <plan>
  -Gather data for testing performance.
  -Find implementations of current algorithms. Contingency: Implement algorithms myself.
  -Devise a new algorithm for dictionary matching.
  -Implement the algorithm.
  -Test how the performance of the algorithm compares to current implementations.
  -Improve and optimise the time or space complexity.
 </plan>

</project>
